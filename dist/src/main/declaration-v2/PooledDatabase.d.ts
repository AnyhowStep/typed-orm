import * as mysql from "typed-mysql";
import { CreateSelectBuilderDelegate } from "./select-builder";
import { SelectBuilder } from "./select-builder";
import { Join } from "./join";
import { AnyAliasedTable } from "./aliased-table";
import { Table, AnyTable, TableUtil } from "./table";
import { RawInsertValueRow, InsertValueBuilder } from "./insert-value-builder";
import { InsertSelectBuilder } from "./insert-select-builder";
import { UpdateBuilder, RawUpdateAssignmentReferences, UpdateAssignmentReferencesDelegate, UpdateResult } from "./update-builder";
import * as sd from "schema-decorator";
import { WhereDelegate } from "./where-delegate";
import { DeleteBuilder, DeleteTables } from "./delete-builder";
import { SelectBuilderUtil } from "./select-builder-util";
import { FetchRow } from "./fetch-row";
import { SelectCollectionUtil } from "./select-collection";
import { UniqueKeyCollection } from "./unique-key-collection";
import { PolymorphicRawInsertValueRow } from "./polymorphic-insert-value-and-fetch";
import { AliasedTable } from "./aliased-table";
import { AliasedExpr } from "./aliased-expr";
import { Column, AnyColumn } from "./column";
import { Expr } from "./expr";
export declare type ConvenientUpdateSelectBuilder<TableT extends AnyTable> = (SelectBuilder<{
    hasSelect: false;
    hasFrom: true;
    hasUnion: false;
    joins: [Join<TableT, TableT["columns"], false>];
    selects: undefined;
    aggregateDelegate: undefined;
    hasParentJoins: false;
    parentJoins: any;
}>);
export declare type ConvenientDeleteSelectBuilder<TableT extends AnyTable> = (SelectBuilder<{
    hasSelect: false;
    hasFrom: true;
    hasUnion: false;
    joins: [Join<TableT, TableT["columns"], false>];
    selects: undefined;
    aggregateDelegate: undefined;
    hasParentJoins: false;
    parentJoins: any;
}>);
export declare class PooledDatabase extends mysql.PooledDatabase {
    allocate(): PooledDatabase;
    transaction<ResultT>(callback: (db: PooledDatabase) => Promise<ResultT>): Promise<ResultT>;
    transactionIfNotInOne<ResultT>(callback: (db: PooledDatabase) => Promise<ResultT>): Promise<ResultT>;
    readonly query: CreateSelectBuilderDelegate;
    readonly from: <TableT extends AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>>(table: TableT) => ("__DUMMY_FROM_TABLE" extends TableT["alias"] ? Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
        autoIncrement: undefined;
        isGenerated: {};
        hasDefaultValue: {};
        isMutable: {};
        id: undefined;
        uniqueKeys: undefined;
        parentTables: undefined;
    }>, {}, true> : never) extends never ? SelectBuilder<{
        readonly hasSelect: false;
        readonly hasFrom: true;
        readonly hasUnion: false;
        readonly joins: [Join<TableT, TableT["columns"], false>];
        readonly selects: undefined;
        readonly aggregateDelegate: undefined;
        readonly hasParentJoins: false;
        readonly parentJoins: [Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
            autoIncrement: undefined;
            isGenerated: {};
            hasDefaultValue: {};
            isMutable: {};
            id: undefined;
            uniqueKeys: undefined;
            parentTables: undefined;
        }>, {}, true>];
    }> : void | Error | ["Alias", TableT["alias"], "was already used as join in parent scope", "__DUMMY_FROM_TABLE" extends TableT["alias"] ? Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
        autoIncrement: undefined;
        isGenerated: {};
        hasDefaultValue: {};
        isMutable: {};
        id: undefined;
        uniqueKeys: undefined;
        parentTables: undefined;
    }>, {}, true> : never];
    readonly select: <SelectDelegateT extends (columnReferences: {}, selectBuilder: SelectBuilder<{
        hasSelect: false;
        hasFrom: false;
        hasUnion: false;
        joins: [Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
            autoIncrement: undefined;
            isGenerated: {};
            hasDefaultValue: {};
            isMutable: {};
            id: undefined;
            uniqueKeys: undefined;
            parentTables: undefined;
        }>, {}, true>];
        selects: undefined;
        aggregateDelegate: undefined;
        hasParentJoins: false;
        parentJoins: [Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
            autoIncrement: undefined;
            isGenerated: {};
            hasDefaultValue: {};
            isMutable: {};
            id: undefined;
            uniqueKeys: undefined;
            parentTables: undefined;
        }>, {}, true>];
    }>) => AliasedExpr<{}, "__expr", any, any>[] & {
        "0": AliasedExpr<{}, "__expr", any, any>;
    }>(delegate: SelectDelegateT) => Error extends (true extends (({ [index in Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: ReturnType<SelectDelegateT>[index] extends Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? ReturnType<SelectDelegateT>[index] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? Column<ReturnType<SelectDelegateT>[index]["tableAlias"], ReturnType<SelectDelegateT>[index]["alias"], ReturnType<ReturnType<SelectDelegateT>[index]["assertDelegate"]>> : ReturnType<SelectDelegateT>[index] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? ReturnType<SelectDelegateT>[index][keyof ReturnType<SelectDelegateT>[index]] : ReturnType<SelectDelegateT>[index] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[index] : never : never; } & {
        "0": ReturnType<SelectDelegateT>[0] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? Column<ReturnType<SelectDelegateT>[0]["tableAlias"], ReturnType<SelectDelegateT>[0]["alias"], ReturnType<ReturnType<SelectDelegateT>[0]["assertDelegate"]>> : ReturnType<SelectDelegateT>[0] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? ReturnType<SelectDelegateT>[0][keyof ReturnType<SelectDelegateT>[0]] : ReturnType<SelectDelegateT>[0] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[0] : never;
        length: ReturnType<SelectDelegateT> extends {
            "20": any;
        } ? 21 : ReturnType<SelectDelegateT> extends {
            "19": any;
        } ? 20 : ReturnType<SelectDelegateT> extends {
            "18": any;
        } ? 19 : ReturnType<SelectDelegateT> extends {
            "17": any;
        } ? 18 : ReturnType<SelectDelegateT> extends {
            "16": any;
        } ? 17 : ReturnType<SelectDelegateT> extends {
            "15": any;
        } ? 16 : ReturnType<SelectDelegateT> extends {
            "14": any;
        } ? 15 : ReturnType<SelectDelegateT> extends {
            "13": any;
        } ? 14 : ReturnType<SelectDelegateT> extends {
            "12": any;
        } ? 13 : ReturnType<SelectDelegateT> extends {
            "11": any;
        } ? 12 : ReturnType<SelectDelegateT> extends {
            "10": any;
        } ? 11 : ReturnType<SelectDelegateT> extends {
            "9": any;
        } ? 10 : ReturnType<SelectDelegateT> extends {
            "8": any;
        } ? 9 : ReturnType<SelectDelegateT> extends {
            "7": any;
        } ? 8 : ReturnType<SelectDelegateT> extends {
            "6": any;
        } ? 7 : ReturnType<SelectDelegateT> extends {
            "5": any;
        } ? 6 : ReturnType<SelectDelegateT> extends {
            "4": any;
        } ? 5 : ReturnType<SelectDelegateT> extends {
            "3": any;
        } ? 4 : ReturnType<SelectDelegateT> extends {
            "2": any;
        } ? 3 : ReturnType<SelectDelegateT> extends {
            "1": any;
        } ? 2 : ReturnType<SelectDelegateT> extends {
            "0": any;
        } ? 1 : never;
    } & Column<string, string, any>[])["length"] extends 1 ? false : { [index in "0" | Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: { [other in Exclude<"0", index> | Exclude<Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, index>]: Extract<({ [index in Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: ReturnType<SelectDelegateT>[index] extends Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? ReturnType<SelectDelegateT>[index] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? Column<ReturnType<SelectDelegateT>[index]["tableAlias"], ReturnType<SelectDelegateT>[index]["alias"], ReturnType<ReturnType<SelectDelegateT>[index]["assertDelegate"]>> : ReturnType<SelectDelegateT>[index] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? ReturnType<SelectDelegateT>[index][keyof ReturnType<SelectDelegateT>[index]] : ReturnType<SelectDelegateT>[index] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[index] : never : never; } & {
        "0": ReturnType<SelectDelegateT>[0] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? Column<ReturnType<SelectDelegateT>[0]["tableAlias"], ReturnType<SelectDelegateT>[0]["alias"], ReturnType<ReturnType<SelectDelegateT>[0]["assertDelegate"]>> : ReturnType<SelectDelegateT>[0] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? ReturnType<SelectDelegateT>[0][keyof ReturnType<SelectDelegateT>[0]] : ReturnType<SelectDelegateT>[0] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[0] : never;
        length: ReturnType<SelectDelegateT> extends {
            "20": any;
        } ? 21 : ReturnType<SelectDelegateT> extends {
            "19": any;
        } ? 20 : ReturnType<SelectDelegateT> extends {
            "18": any;
        } ? 19 : ReturnType<SelectDelegateT> extends {
            "17": any;
        } ? 18 : ReturnType<SelectDelegateT> extends {
            "16": any;
        } ? 17 : ReturnType<SelectDelegateT> extends {
            "15": any;
        } ? 16 : ReturnType<SelectDelegateT> extends {
            "14": any;
        } ? 15 : ReturnType<SelectDelegateT> extends {
            "13": any;
        } ? 14 : ReturnType<SelectDelegateT> extends {
            "12": any;
        } ? 13 : ReturnType<SelectDelegateT> extends {
            "11": any;
        } ? 12 : ReturnType<SelectDelegateT> extends {
            "10": any;
        } ? 11 : ReturnType<SelectDelegateT> extends {
            "9": any;
        } ? 10 : ReturnType<SelectDelegateT> extends {
            "8": any;
        } ? 9 : ReturnType<SelectDelegateT> extends {
            "7": any;
        } ? 8 : ReturnType<SelectDelegateT> extends {
            "6": any;
        } ? 7 : ReturnType<SelectDelegateT> extends {
            "5": any;
        } ? 6 : ReturnType<SelectDelegateT> extends {
            "4": any;
        } ? 5 : ReturnType<SelectDelegateT> extends {
            "3": any;
        } ? 4 : ReturnType<SelectDelegateT> extends {
            "2": any;
        } ? 3 : ReturnType<SelectDelegateT> extends {
            "1": any;
        } ? 2 : ReturnType<SelectDelegateT> extends {
            "0": any;
        } ? 1 : never;
    } & Column<string, string, any>[])[index], ({ [index in Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: ReturnType<SelectDelegateT>[index] extends Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? ReturnType<SelectDelegateT>[index] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? Column<ReturnType<SelectDelegateT>[index]["tableAlias"], ReturnType<SelectDelegateT>[index]["alias"], ReturnType<ReturnType<SelectDelegateT>[index]["assertDelegate"]>> : ReturnType<SelectDelegateT>[index] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? ReturnType<SelectDelegateT>[index][keyof ReturnType<SelectDelegateT>[index]] : ReturnType<SelectDelegateT>[index] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[index] : never : never; } & {
        "0": ReturnType<SelectDelegateT>[0] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? Column<ReturnType<SelectDelegateT>[0]["tableAlias"], ReturnType<SelectDelegateT>[0]["alias"], ReturnType<ReturnType<SelectDelegateT>[0]["assertDelegate"]>> : ReturnType<SelectDelegateT>[0] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? ReturnType<SelectDelegateT>[0][keyof ReturnType<SelectDelegateT>[0]] : ReturnType<SelectDelegateT>[0] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[0] : never;
        length: ReturnType<SelectDelegateT> extends {
            "20": any;
        } ? 21 : ReturnType<SelectDelegateT> extends {
            "19": any;
        } ? 20 : ReturnType<SelectDelegateT> extends {
            "18": any;
        } ? 19 : ReturnType<SelectDelegateT> extends {
            "17": any;
        } ? 18 : ReturnType<SelectDelegateT> extends {
            "16": any;
        } ? 17 : ReturnType<SelectDelegateT> extends {
            "15": any;
        } ? 16 : ReturnType<SelectDelegateT> extends {
            "14": any;
        } ? 15 : ReturnType<SelectDelegateT> extends {
            "13": any;
        } ? 14 : ReturnType<SelectDelegateT> extends {
            "12": any;
        } ? 13 : ReturnType<SelectDelegateT> extends {
            "11": any;
        } ? 12 : ReturnType<SelectDelegateT> extends {
            "10": any;
        } ? 11 : ReturnType<SelectDelegateT> extends {
            "9": any;
        } ? 10 : ReturnType<SelectDelegateT> extends {
            "8": any;
        } ? 9 : ReturnType<SelectDelegateT> extends {
            "7": any;
        } ? 8 : ReturnType<SelectDelegateT> extends {
            "6": any;
        } ? 7 : ReturnType<SelectDelegateT> extends {
            "5": any;
        } ? 6 : ReturnType<SelectDelegateT> extends {
            "4": any;
        } ? 5 : ReturnType<SelectDelegateT> extends {
            "3": any;
        } ? 4 : ReturnType<SelectDelegateT> extends {
            "2": any;
        } ? 3 : ReturnType<SelectDelegateT> extends {
            "1": any;
        } ? 2 : ReturnType<SelectDelegateT> extends {
            "0": any;
        } ? 1 : never;
    } & Column<string, string, any>[])[other]> extends never ? false : true; }[Exclude<"0", index> | Exclude<Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, index>]; }["0" | Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]) ? void | Error | ["Duplicate columns found in SELECT; consider aliasing", ReturnType<SelectDelegateT>, SelectDelegateT] : ReturnType<SelectDelegateT>) ? true extends (({ [index in Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: ReturnType<SelectDelegateT>[index] extends Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? ReturnType<SelectDelegateT>[index] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? Column<ReturnType<SelectDelegateT>[index]["tableAlias"], ReturnType<SelectDelegateT>[index]["alias"], ReturnType<ReturnType<SelectDelegateT>[index]["assertDelegate"]>> : ReturnType<SelectDelegateT>[index] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? ReturnType<SelectDelegateT>[index][keyof ReturnType<SelectDelegateT>[index]] : ReturnType<SelectDelegateT>[index] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[index] : never : never; } & {
        "0": ReturnType<SelectDelegateT>[0] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? Column<ReturnType<SelectDelegateT>[0]["tableAlias"], ReturnType<SelectDelegateT>[0]["alias"], ReturnType<ReturnType<SelectDelegateT>[0]["assertDelegate"]>> : ReturnType<SelectDelegateT>[0] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? ReturnType<SelectDelegateT>[0][keyof ReturnType<SelectDelegateT>[0]] : ReturnType<SelectDelegateT>[0] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[0] : never;
        length: ReturnType<SelectDelegateT> extends {
            "20": any;
        } ? 21 : ReturnType<SelectDelegateT> extends {
            "19": any;
        } ? 20 : ReturnType<SelectDelegateT> extends {
            "18": any;
        } ? 19 : ReturnType<SelectDelegateT> extends {
            "17": any;
        } ? 18 : ReturnType<SelectDelegateT> extends {
            "16": any;
        } ? 17 : ReturnType<SelectDelegateT> extends {
            "15": any;
        } ? 16 : ReturnType<SelectDelegateT> extends {
            "14": any;
        } ? 15 : ReturnType<SelectDelegateT> extends {
            "13": any;
        } ? 14 : ReturnType<SelectDelegateT> extends {
            "12": any;
        } ? 13 : ReturnType<SelectDelegateT> extends {
            "11": any;
        } ? 12 : ReturnType<SelectDelegateT> extends {
            "10": any;
        } ? 11 : ReturnType<SelectDelegateT> extends {
            "9": any;
        } ? 10 : ReturnType<SelectDelegateT> extends {
            "8": any;
        } ? 9 : ReturnType<SelectDelegateT> extends {
            "7": any;
        } ? 8 : ReturnType<SelectDelegateT> extends {
            "6": any;
        } ? 7 : ReturnType<SelectDelegateT> extends {
            "5": any;
        } ? 6 : ReturnType<SelectDelegateT> extends {
            "4": any;
        } ? 5 : ReturnType<SelectDelegateT> extends {
            "3": any;
        } ? 4 : ReturnType<SelectDelegateT> extends {
            "2": any;
        } ? 3 : ReturnType<SelectDelegateT> extends {
            "1": any;
        } ? 2 : ReturnType<SelectDelegateT> extends {
            "0": any;
        } ? 1 : never;
    } & Column<string, string, any>[])["length"] extends 1 ? false : { [index in "0" | Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: { [other in Exclude<"0", index> | Exclude<Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, index>]: Extract<({ [index in Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: ReturnType<SelectDelegateT>[index] extends Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? ReturnType<SelectDelegateT>[index] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? Column<ReturnType<SelectDelegateT>[index]["tableAlias"], ReturnType<SelectDelegateT>[index]["alias"], ReturnType<ReturnType<SelectDelegateT>[index]["assertDelegate"]>> : ReturnType<SelectDelegateT>[index] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? ReturnType<SelectDelegateT>[index][keyof ReturnType<SelectDelegateT>[index]] : ReturnType<SelectDelegateT>[index] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[index] : never : never; } & {
        "0": ReturnType<SelectDelegateT>[0] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? Column<ReturnType<SelectDelegateT>[0]["tableAlias"], ReturnType<SelectDelegateT>[0]["alias"], ReturnType<ReturnType<SelectDelegateT>[0]["assertDelegate"]>> : ReturnType<SelectDelegateT>[0] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? ReturnType<SelectDelegateT>[0][keyof ReturnType<SelectDelegateT>[0]] : ReturnType<SelectDelegateT>[0] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[0] : never;
        length: ReturnType<SelectDelegateT> extends {
            "20": any;
        } ? 21 : ReturnType<SelectDelegateT> extends {
            "19": any;
        } ? 20 : ReturnType<SelectDelegateT> extends {
            "18": any;
        } ? 19 : ReturnType<SelectDelegateT> extends {
            "17": any;
        } ? 18 : ReturnType<SelectDelegateT> extends {
            "16": any;
        } ? 17 : ReturnType<SelectDelegateT> extends {
            "15": any;
        } ? 16 : ReturnType<SelectDelegateT> extends {
            "14": any;
        } ? 15 : ReturnType<SelectDelegateT> extends {
            "13": any;
        } ? 14 : ReturnType<SelectDelegateT> extends {
            "12": any;
        } ? 13 : ReturnType<SelectDelegateT> extends {
            "11": any;
        } ? 12 : ReturnType<SelectDelegateT> extends {
            "10": any;
        } ? 11 : ReturnType<SelectDelegateT> extends {
            "9": any;
        } ? 10 : ReturnType<SelectDelegateT> extends {
            "8": any;
        } ? 9 : ReturnType<SelectDelegateT> extends {
            "7": any;
        } ? 8 : ReturnType<SelectDelegateT> extends {
            "6": any;
        } ? 7 : ReturnType<SelectDelegateT> extends {
            "5": any;
        } ? 6 : ReturnType<SelectDelegateT> extends {
            "4": any;
        } ? 5 : ReturnType<SelectDelegateT> extends {
            "3": any;
        } ? 4 : ReturnType<SelectDelegateT> extends {
            "2": any;
        } ? 3 : ReturnType<SelectDelegateT> extends {
            "1": any;
        } ? 2 : ReturnType<SelectDelegateT> extends {
            "0": any;
        } ? 1 : never;
    } & Column<string, string, any>[])[index], ({ [index in Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: ReturnType<SelectDelegateT>[index] extends Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? ReturnType<SelectDelegateT>[index] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? Column<ReturnType<SelectDelegateT>[index]["tableAlias"], ReturnType<SelectDelegateT>[index]["alias"], ReturnType<ReturnType<SelectDelegateT>[index]["assertDelegate"]>> : ReturnType<SelectDelegateT>[index] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? ReturnType<SelectDelegateT>[index][keyof ReturnType<SelectDelegateT>[index]] : ReturnType<SelectDelegateT>[index] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[index] : never : never; } & {
        "0": ReturnType<SelectDelegateT>[0] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? Column<ReturnType<SelectDelegateT>[0]["tableAlias"], ReturnType<SelectDelegateT>[0]["alias"], ReturnType<ReturnType<SelectDelegateT>[0]["assertDelegate"]>> : ReturnType<SelectDelegateT>[0] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? ReturnType<SelectDelegateT>[0][keyof ReturnType<SelectDelegateT>[0]] : ReturnType<SelectDelegateT>[0] extends Column<string, string, any> ? ReturnType<SelectDelegateT>[0] : never;
        length: ReturnType<SelectDelegateT> extends {
            "20": any;
        } ? 21 : ReturnType<SelectDelegateT> extends {
            "19": any;
        } ? 20 : ReturnType<SelectDelegateT> extends {
            "18": any;
        } ? 19 : ReturnType<SelectDelegateT> extends {
            "17": any;
        } ? 18 : ReturnType<SelectDelegateT> extends {
            "16": any;
        } ? 17 : ReturnType<SelectDelegateT> extends {
            "15": any;
        } ? 16 : ReturnType<SelectDelegateT> extends {
            "14": any;
        } ? 15 : ReturnType<SelectDelegateT> extends {
            "13": any;
        } ? 14 : ReturnType<SelectDelegateT> extends {
            "12": any;
        } ? 13 : ReturnType<SelectDelegateT> extends {
            "11": any;
        } ? 12 : ReturnType<SelectDelegateT> extends {
            "10": any;
        } ? 11 : ReturnType<SelectDelegateT> extends {
            "9": any;
        } ? 10 : ReturnType<SelectDelegateT> extends {
            "8": any;
        } ? 9 : ReturnType<SelectDelegateT> extends {
            "7": any;
        } ? 8 : ReturnType<SelectDelegateT> extends {
            "6": any;
        } ? 7 : ReturnType<SelectDelegateT> extends {
            "5": any;
        } ? 6 : ReturnType<SelectDelegateT> extends {
            "4": any;
        } ? 5 : ReturnType<SelectDelegateT> extends {
            "3": any;
        } ? 4 : ReturnType<SelectDelegateT> extends {
            "2": any;
        } ? 3 : ReturnType<SelectDelegateT> extends {
            "1": any;
        } ? 2 : ReturnType<SelectDelegateT> extends {
            "0": any;
        } ? 1 : never;
    } & Column<string, string, any>[])[other]> extends never ? false : true; }[Exclude<"0", index> | Exclude<Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, index>]; }["0" | Exclude<Exclude<keyof ReturnType<SelectDelegateT>, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">, number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]) ? void | Error | ["Duplicate columns found in SELECT; consider aliasing", ReturnType<SelectDelegateT>, SelectDelegateT] : ReturnType<SelectDelegateT> : SelectBuilder<{
        hasSelect: true;
        hasFrom: false;
        hasUnion: false;
        joins: [Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
            autoIncrement: undefined;
            isGenerated: {};
            hasDefaultValue: {};
            isMutable: {};
            id: undefined;
            uniqueKeys: undefined;
            parentTables: undefined;
        }>, {}, true>];
        selects: ReturnType<SelectDelegateT>;
        aggregateDelegate: undefined;
        hasParentJoins: false;
        parentJoins: [Join<Table<"__DUMMY_FROM_TABLE", "__DUMMY_FROM_TABLE", {}, {
            autoIncrement: undefined;
            isGenerated: {};
            hasDefaultValue: {};
            isMutable: {};
            id: undefined;
            uniqueKeys: undefined;
            parentTables: undefined;
        }>, {}, true>];
    }>;
    selectAll<T>(assert: sd.AssertFunc<T>, queryStr: string, queryValues?: mysql.QueryValues): Promise<mysql.SelectResult<T>>;
    selectAll<TableT extends AnyAliasedTable>(table: TableT, where?: WhereDelegate<SelectBuilderUtil.CleanToFrom<TableT>>): SelectBuilderUtil.CleanToSelectAll<TableT>;
    selectAllByUniqueKey<TableT extends AnyTable>(table: TableT, uniqueKey: TableUtil.UniqueKeys<TableT>): (SelectBuilderUtil.CleanToSelectAll<TableT>);
    fetchOneByUniqueKey<TableT extends AnyTable>(table: TableT, uniqueKey: TableUtil.UniqueKeys<TableT>): Promise<(((string extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? string : { [str in Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]: Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, str>; }[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]) extends never ? true : false) extends true ? Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> extends "__expr" ? ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})[keyof ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})] : { [columnName in keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } : { [tableAlias in Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, "__expr" | (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never)>]: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; }; } & { [tableAlias in Exclude<Extract<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never>, "__expr">]?: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } | undefined; } & ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})) extends Promise<infer R> ? R : ((string extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? string : { [str in Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]: Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, str>; }[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]) extends never ? true : false) extends true ? Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> extends "__expr" ? ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})[keyof ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})] : { [columnName in keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } : { [tableAlias in Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, "__expr" | (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never)>]: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; }; } & { [tableAlias in Exclude<Extract<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never>, "__expr">]?: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } | undefined; } & ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})>;
    fetchZeroOrOneByUniqueKey<TableT extends AnyTable>(table: TableT, uniqueKey: TableUtil.UniqueKeys<TableT>): Promise<((((string extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? string : { [str in Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]: Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, str>; }[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]) extends never ? true : false) extends true ? Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> extends "__expr" ? ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})[keyof ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})] : { [columnName in keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } : { [tableAlias in Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, "__expr" | (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never)>]: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; }; } & { [tableAlias in Exclude<Extract<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never>, "__expr">]?: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } | undefined; } & ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})) extends Promise<infer R> ? R : ((string extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? string : { [str in Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]: Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, str>; }[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]) extends never ? true : false) extends true ? Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> extends "__expr" ? ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})[keyof ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})] : { [columnName in keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>]]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string> ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } : { [tableAlias in Exclude<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, "__expr" | (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never)>]: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; }; } & { [tableAlias in Exclude<Extract<Extract<keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}), string>, Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? never : never>, "__expr">]?: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})[tableAlias], string>]: ReturnType<(Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["alias"] extends tableAlias ? Join<TableT, TableT["columns"], false> : never : never)["columns"][columnName]["assertDelegate"]>; } | undefined; } & ("__expr" extends keyof ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }>, {
        readonly [columnName: string]: Column<string, string, any>;
    }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) ? {
        __expr: { [columnName in Extract<keyof (((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"], string>]: ReturnType<(((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["alias"]]: Column<tableAlias, columnAlias, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends Column<string, string, any> ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["tableAlias"]]: { readonly [columnName in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["name"]]: Column<tableAlias, columnName, ReturnType<((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])["assertDelegate"]>>; }; } : (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"] extends {
            readonly [columnName: string]: Column<string, string, any>;
        } ? { readonly [tableAlias in ((Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"])[keyof TableT["columns"] | keyof (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never)]["tableAlias"]]: (Join<TableT, TableT["columns"], false> extends Join<AliasedTable<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }>, {
            readonly [columnName: string]: Column<string, string, any>;
        }, boolean> ? TableT["columns"] : never) & TableT["columns"]; } : {}) & {})["__expr"][columnName]["assertDelegate"]>; };
    } : {})) | undefined>;
    fetchOneById<TableT extends AnyAliasedTable & {
        data: {
            id: Column<any, any, number>;
        };
    }>(table: TableT, id: number): (Promise<FetchRow<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["joins"], SelectCollectionUtil.ToColumnReferences<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["selects"]>>>);
    fetchZeroOrOneById<TableT extends AnyAliasedTable & {
        data: {
            id: Column<any, any, number>;
        };
    }>(table: TableT, id: number): (Promise<FetchRow<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["joins"], SelectCollectionUtil.ToColumnReferences<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["selects"]>> | undefined>);
    readonly insertValue: <TableT extends Table<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }, any>>(table: TableT, value: { [name in Exclude<Extract<keyof TableT["columns"], string>, keyof TableT["data"]["hasDefaultValue"] | keyof TableT["data"]["isGenerated"]>]: (ReturnType<TableT["columns"][name]["assertDelegate"]> extends string | number | boolean | Date | null | undefined ? ReturnType<TableT["columns"][name]["assertDelegate"]> : never) | Expr<{}, ReturnType<TableT["columns"][name]["assertDelegate"]>> | Column<any, any, ReturnType<TableT["columns"][name]["assertDelegate"]>> | SelectBuilder<{
        hasSelect: true;
        hasFrom: any;
        hasUnion: any;
        joins: any;
        selects: any[] & {
            "0": any;
        } & {
            length: 1;
        } & {
            "0": any;
        };
        aggregateDelegate: any;
        hasParentJoins: any;
        parentJoins: any;
    }>; } & { [name in Exclude<Extract<keyof TableT["data"]["hasDefaultValue"], string>, keyof TableT["data"]["isGenerated"]>]?: (ReturnType<TableT["columns"][name]["assertDelegate"]> extends string | number | boolean | Date | null | undefined ? ReturnType<TableT["columns"][name]["assertDelegate"]> : never) | Expr<{}, ReturnType<TableT["columns"][name]["assertDelegate"]>> | Column<any, any, ReturnType<TableT["columns"][name]["assertDelegate"]>> | SelectBuilder<{
        hasSelect: true;
        hasFrom: any;
        hasUnion: any;
        joins: any;
        selects: any[] & {
            "0": any;
        } & {
            length: 1;
        } & {
            "0": any;
        };
        aggregateDelegate: any;
        hasParentJoins: any;
        parentJoins: any;
    }> | undefined; }) => InsertValueBuilder<TableT, ({ [name in Exclude<Extract<keyof TableT["columns"], string>, keyof TableT["data"]["hasDefaultValue"] | keyof TableT["data"]["isGenerated"]>]: (ReturnType<TableT["columns"][name]["assertDelegate"]> extends string | number | boolean | Date | null | undefined ? ReturnType<TableT["columns"][name]["assertDelegate"]> : never) | Expr<{}, ReturnType<TableT["columns"][name]["assertDelegate"]>> | Column<any, any, ReturnType<TableT["columns"][name]["assertDelegate"]>> | SelectBuilder<{
        hasSelect: true;
        hasFrom: any;
        hasUnion: any;
        joins: any;
        selects: any[] & {
            "0": any;
        } & {
            length: 1;
        } & {
            "0": any;
        };
        aggregateDelegate: any;
        hasParentJoins: any;
        parentJoins: any;
    }>; } & { [name in Exclude<Extract<keyof TableT["data"]["hasDefaultValue"], string>, keyof TableT["data"]["isGenerated"]>]?: (ReturnType<TableT["columns"][name]["assertDelegate"]> extends string | number | boolean | Date | null | undefined ? ReturnType<TableT["columns"][name]["assertDelegate"]> : never) | Expr<{}, ReturnType<TableT["columns"][name]["assertDelegate"]>> | Column<any, any, ReturnType<TableT["columns"][name]["assertDelegate"]>> | SelectBuilder<{
        hasSelect: true;
        hasFrom: any;
        hasUnion: any;
        joins: any;
        selects: any[] & {
            "0": any;
        } & {
            length: 1;
        } & {
            "0": any;
        };
        aggregateDelegate: any;
        hasParentJoins: any;
        parentJoins: any;
    }> | undefined; })[], "NORMAL">;
    insertValueAndFetch<TableT extends AnyTable & {
        data: {
            uniqueKeys: UniqueKeyCollection;
        };
    }>(table: TableT, value: RawInsertValueRow<TableT>): (Promise<FetchRow<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["joins"], SelectCollectionUtil.ToColumnReferences<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["selects"]>>>);
    readonly insertSelect: <TableT extends Table<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }, any>, SelectBuilderT extends SelectBuilder<any>>(table: TableT, selectBuilder: SelectBuilderT, delegate: (s: keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}) extends never ? {} : ((string extends Extract<keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}), string> ? string : { [str in Extract<keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}), string>]: Exclude<Extract<keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}), string>, str>; }[Extract<keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}), string>]) extends never ? true : false) extends true ? (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[Extract<keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}), string>] : SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {}) => { [columnName in Exclude<Extract<keyof TableT["columns"], string>, keyof TableT["data"]["hasDefaultValue"] | keyof TableT["data"]["isGenerated"]>]: Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined> | Extract<{ [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] extends Column<string, string, any> ? { [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] : never, Column<any, any, Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined>>>; } & { [columnName in Exclude<Extract<keyof TableT["data"]["hasDefaultValue"], string>, keyof TableT["data"]["isGenerated"]>]?: Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined> | Extract<{ [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] extends Column<string, string, any> ? { [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] : never, Column<any, any, Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined>>> | undefined; }) => InsertSelectBuilder<TableT, SelectBuilderT, { [columnName in Exclude<Extract<keyof TableT["columns"], string>, keyof TableT["data"]["hasDefaultValue"] | keyof TableT["data"]["isGenerated"]>]: Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined> | Extract<{ [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] extends Column<string, string, any> ? { [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] : never, Column<any, any, Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined>>>; } & { [columnName in Exclude<Extract<keyof TableT["data"]["hasDefaultValue"], string>, keyof TableT["data"]["isGenerated"]>]?: Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined> | Extract<{ [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] extends Column<string, string, any> ? { [tableAlias in keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})]: (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias][keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})[tableAlias]]; }[keyof (SelectBuilderT["data"]["selects"] extends (Column<string, string, any> | {
        readonly [columnName: string]: Column<string, string, any>;
    } | AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any>)[] & {
        "0": Column<string, string, any> | {
            readonly [columnName: string]: Column<string, string, any>;
        } | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<string, string, any> | undefined;
            } | undefined;
        }, string, string, any>;
    } ? ("0" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["0"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["0"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["0"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["0"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["0"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["0"][keyof SelectBuilderT["data"]["selects"]["0"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["0"]; } : {} : {}) & ("1" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["1"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["1"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["1"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["1"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["1"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["1"][keyof SelectBuilderT["data"]["selects"]["1"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["1"]; } : {} : {}) & ("2" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["2"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["2"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["2"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["2"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["2"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["2"][keyof SelectBuilderT["data"]["selects"]["2"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["2"]; } : {} : {}) & ("3" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["3"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["3"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["3"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["3"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["3"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["3"][keyof SelectBuilderT["data"]["selects"]["3"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["3"]; } : {} : {}) & ("4" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["4"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["4"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["4"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["4"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["4"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["4"][keyof SelectBuilderT["data"]["selects"]["4"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["4"]; } : {} : {}) & ("5" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["5"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["5"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["5"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["5"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["5"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["5"][keyof SelectBuilderT["data"]["selects"]["5"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["5"]; } : {} : {}) & ("6" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["6"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["6"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["6"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["6"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["6"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["6"][keyof SelectBuilderT["data"]["selects"]["6"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["6"]; } : {} : {}) & ("7" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["7"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["7"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["7"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["7"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["7"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["7"][keyof SelectBuilderT["data"]["selects"]["7"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["7"]; } : {} : {}) & ("8" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["8"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["8"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["8"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["8"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["8"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["8"][keyof SelectBuilderT["data"]["selects"]["8"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["8"]; } : {} : {}) & ("9" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["9"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["9"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["9"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["9"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["9"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["9"][keyof SelectBuilderT["data"]["selects"]["9"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["9"]; } : {} : {}) & ("10" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["10"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["10"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["10"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["10"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["10"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["10"][keyof SelectBuilderT["data"]["selects"]["10"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["10"]; } : {} : {}) & ("11" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["11"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["11"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["11"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["11"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["11"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["11"][keyof SelectBuilderT["data"]["selects"]["11"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["11"]; } : {} : {}) & ("12" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["12"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["12"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["12"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["12"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["12"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["12"][keyof SelectBuilderT["data"]["selects"]["12"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["12"]; } : {} : {}) & ("13" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["13"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["13"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["13"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["13"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["13"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["13"][keyof SelectBuilderT["data"]["selects"]["13"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["13"]; } : {} : {}) & ("14" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["14"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["14"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["14"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["14"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["14"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["14"][keyof SelectBuilderT["data"]["selects"]["14"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["14"]; } : {} : {}) & ("15" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["15"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["15"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["15"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["15"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["15"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["15"][keyof SelectBuilderT["data"]["selects"]["15"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["15"]; } : {} : {}) & ("16" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["16"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["16"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["16"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["16"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["16"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["16"][keyof SelectBuilderT["data"]["selects"]["16"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["16"]; } : {} : {}) & ("17" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["17"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["17"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["17"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["17"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["17"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["17"][keyof SelectBuilderT["data"]["selects"]["17"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["17"]; } : {} : {}) & ("18" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["18"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["18"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["18"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["18"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["18"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["18"][keyof SelectBuilderT["data"]["selects"]["18"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["18"]; } : {} : {}) & ("19" extends Exclude<keyof SelectBuilderT["data"]["selects"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values"> ? SelectBuilderT["data"]["selects"]["19"] extends AliasedExpr<{
        readonly [x: string]: {
            readonly [x: string]: Column<string, string, any> | undefined;
        } | undefined;
    }, string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnAlias in SelectBuilderT["data"]["selects"]["19"]["alias"]]: Column<tableAlias, columnAlias, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends Column<string, string, any> ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"]["tableAlias"]]: { readonly [columnName in SelectBuilderT["data"]["selects"]["19"]["name"]]: Column<tableAlias, columnName, ReturnType<SelectBuilderT["data"]["selects"]["19"]["assertDelegate"]>>; }; } : SelectBuilderT["data"]["selects"]["19"] extends {
        readonly [columnName: string]: Column<string, string, any>;
    } ? { readonly [tableAlias in SelectBuilderT["data"]["selects"]["19"][keyof SelectBuilderT["data"]["selects"]["19"]]["tableAlias"]]: SelectBuilderT["data"]["selects"]["19"]; } : {} : {}) : {})] : never, Column<any, any, Extract<ReturnType<TableT["columns"][columnName]["assertDelegate"]>, string | number | boolean | Date | null | undefined>>> | undefined; }, "NORMAL">;
    update<T extends mysql.QueryValues, ConditionT extends mysql.QueryValues>(assertRow: sd.AssertFunc<T>, assertCondition: sd.AssertFunc<ConditionT>, table: string, row: T, condition: ConditionT): Promise<mysql.UpdateResult<T, ConditionT>>;
    update<TableT extends AnyTable>(table: TableT, delegate: UpdateAssignmentReferencesDelegate<ConvenientUpdateSelectBuilder<TableT>>, where: WhereDelegate<ConvenientUpdateSelectBuilder<TableT>>): (UpdateBuilder<ConvenientUpdateSelectBuilder<TableT>, RawUpdateAssignmentReferences<ConvenientUpdateSelectBuilder<TableT>>>);
    existsById<TableT extends AnyTable & {
        data: {
            id: Column<any, any, number>;
        };
    }>(table: TableT, id: number): Promise<boolean>;
    updateZeroOrOneById<TableT extends AnyTable & {
        data: {
            id: Column<any, any, number>;
        };
    }>(table: TableT, id: number, delegate: UpdateAssignmentReferencesDelegate<ConvenientUpdateSelectBuilder<TableT>>): (Promise<UpdateResult>);
    updateAndFetchZeroOrOneById<TableT extends AnyTable & {
        data: {
            id: Column<any, any, number>;
        };
    }>(table: TableT, id: number, delegate: UpdateAssignmentReferencesDelegate<ConvenientUpdateSelectBuilder<TableT>>): (Promise<UpdateResult & ({
        foundRowCount: 1;
        row: (FetchRow<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["joins"], SelectCollectionUtil.ToColumnReferences<SelectBuilderUtil.CleanToSelectAll<TableT>["data"]["selects"]>>);
    } | {
        foundRowCount: 0;
        row: undefined;
    })>);
    deleteFrom<TableT extends AnyTable>(table: TableT, where: WhereDelegate<ConvenientDeleteSelectBuilder<TableT>>): (DeleteBuilder<ConvenientDeleteSelectBuilder<TableT>, DeleteTables<ConvenientDeleteSelectBuilder<TableT>>>);
    getGenerationExpression(column: AnyColumn): Promise<string>;
    polymorphicInsertValueAndFetch<TableT extends AnyTable>(table: TableT, row: PolymorphicRawInsertValueRow<TableT>): Promise<{ [name in TableT["data"]["parentTables"] extends Table<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }, any>[] & {
        "0": Table<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }, any>;
    } ? Extract<keyof TableT["columns"], string> | { [index in Exclude<keyof TableT["data"]["parentTables"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: TableT["data"]["parentTables"][index] extends Table<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }, any> ? Extract<keyof TableT["data"]["parentTables"][index]["columns"], string> : never; }[Exclude<keyof TableT["data"]["parentTables"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] : Extract<keyof TableT["columns"], string>]: name extends keyof TableT["columns"] ? ReturnType<TableT["columns"][name]["assertDelegate"]> : TableT["data"]["parentTables"] extends Table<string, string, {
        readonly [columnName: string]: Column<string, string, any>;
    }, any>[] & {
        "0": Table<string, string, {
            readonly [columnName: string]: Column<string, string, any>;
        }, any>;
    } ? ("9" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["9"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("8" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["8"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("7" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["7"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("6" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["6"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("5" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["5"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("4" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["4"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("3" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["3"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("2" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["2"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("1" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["1"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? ("0" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["0"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never) extends never ? never : "0" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["0"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "1" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["1"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "2" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["2"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "3" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["3"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "4" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["4"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "5" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["5"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "6" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["6"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "7" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["7"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "8" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["8"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : "9" extends keyof TableT["data"]["parentTables"] ? TableT["data"]["parentTables"]["9"] extends Table<any, any, infer ColumnsT, any> ? name extends keyof ColumnsT ? ReturnType<ColumnsT[name]["assertDelegate"]> : never : never : never : never; }>;
}
