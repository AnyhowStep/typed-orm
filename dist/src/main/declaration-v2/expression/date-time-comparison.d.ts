import { RawExprUtil } from "../raw-expr";
import { Expr } from "../expr";
import { Column } from "../column";
import { Join } from "../join";
import { AliasedTable } from "../aliased-table";
export declare const isBefore: <LeftT extends Date | Expr<any, Date> | Column<any, any, Date>, RightT extends Date | Expr<any, Date> | Column<any, any, Date>>(left: LeftT, right: RightT) => Expr<Extract<{ [k in keyof ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))]: ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))[k]; }, import("../column-references/column-references").ColumnReferences>, boolean>;
export declare const isAfter: <LeftT extends Date | Expr<any, Date> | Column<any, any, Date>, RightT extends Date | Expr<any, Date> | Column<any, any, Date>>(left: LeftT, right: RightT) => Expr<Extract<{ [k in keyof ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))]: ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))[k]; }, import("../column-references/column-references").ColumnReferences>, boolean>;
export declare const isBeforeOrEqual: <LeftT extends Date | Expr<any, Date> | Column<any, any, Date>, RightT extends Date | Expr<any, Date> | Column<any, any, Date>>(left: LeftT, right: RightT) => Expr<Extract<{ [k in keyof ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))]: ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))[k]; }, import("../column-references/column-references").ColumnReferences>, boolean>;
export declare const isAfterOrEqual: <LeftT extends Date | Expr<any, Date> | Column<any, any, Date>, RightT extends Date | Expr<any, Date> | Column<any, any, Date>>(left: LeftT, right: RightT) => Expr<Extract<{ [k in keyof ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))]: ((LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<LeftT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof LeftT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof LeftT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"] extends AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection> ? { readonly [tableAlias in Extract<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index]; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"]]: { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? true extends { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"], string>]: Column<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["tableAlias"], { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["name"], ReturnType<{ [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>>["table"]["alias"] extends tableAlias ? Extract<RightT["data"]["parentJoins"][index], Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean>> : never : never; }[Extract<Exclude<keyof RightT["data"]["parentJoins"], number | "fill" | "filter" | "length" | "reverse" | "map" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "copyWithin" | "entries" | "keys" | "values">, keyof RightT["data"]["parentJoins"] & string>]["columns"] : never; } : {} : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never))[k]; }, import("../column-references/column-references").ColumnReferences>, boolean>;
//# sourceMappingURL=date-time-comparison.d.ts.map