import { Expr } from "../expr";
import { SelectBuilder } from "../select-builder";
import { Column } from "../column";
import { AliasedExpr } from "../aliased-expr";
import { Join } from "../join";
import { AliasedTable } from "../aliased-table";
export declare const lt: <LeftT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>, RightT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>>(left: LeftT, right: RightT) => Expr<{ readonly [tableAlias in Extract<Exclude<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Exclude<keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)>, string>]: (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? { readonly [columnName in Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias], string>]: columnName extends keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] ? Column<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["tableAlias"], (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["name"], ReturnType<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]> & ReturnType<(RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]>> : (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]; } & (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never : never; }, boolean>;
export declare const gt: <LeftT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>, RightT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>>(left: LeftT, right: RightT) => Expr<{ readonly [tableAlias in Extract<Exclude<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Exclude<keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)>, string>]: (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? { readonly [columnName in Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias], string>]: columnName extends keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] ? Column<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["tableAlias"], (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["name"], ReturnType<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]> & ReturnType<(RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]>> : (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]; } & (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never : never; }, boolean>;
export declare const ltEq: <LeftT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>, RightT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>>(left: LeftT, right: RightT) => Expr<{ readonly [tableAlias in Extract<Exclude<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Exclude<keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)>, string>]: (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? { readonly [columnName in Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias], string>]: columnName extends keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] ? Column<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["tableAlias"], (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["name"], ReturnType<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]> & ReturnType<(RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]>> : (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]; } & (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never : never; }, boolean>;
export declare const gtEq: <LeftT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>, RightT extends number | Column<any, any, number> | Expr<any, number> | SelectBuilder<{
    hasSelect: true;
    hasFrom: any;
    hasUnion: any;
    joins: any;
    selects: any[] & {
        "0": any;
    } & {
        length: 1;
    } & {
        "0": Column<any, any, number> | AliasedExpr<{
            readonly [x: string]: {
                readonly [x: string]: Column<any, any, number> | undefined;
            } | undefined;
        }, "__expr", any, number>;
    };
    aggregateDelegate: any;
    hasParentJoins: any;
    parentJoins: any;
}>>(left: LeftT, right: RightT) => Expr<{ readonly [tableAlias in Extract<Exclude<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Exclude<keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)>, string>]: (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never; } & { readonly [tableAlias in Extract<Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never), keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)>, string>]: (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] extends {
    readonly [columnName: string]: Column<string, string, any>;
} ? { readonly [columnName in Extract<keyof (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias], string>]: columnName extends keyof (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] ? Column<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["tableAlias"], (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["name"], ReturnType<(LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]> & ReturnType<(RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias][columnName]["assertDelegate"]>> : (LeftT extends SelectBuilder<any> ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof LeftT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : LeftT extends string | number | boolean | Date | null | undefined ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never)[tableAlias][columnName]; } & (RightT extends SelectBuilder<any> ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["table"]["alias"]]: true extends { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"], string>]: Column<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["tableAlias"], { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["name"], ReturnType<{ [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, {
    readonly [columnName: string]: Column<string, string, any>;
}>, {
    readonly [columnName: string]: Column<string, string, any>;
}, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Exclude<keyof RightT["data"]["parentJoins"], number | "reverse" | "map" | "filter" | "push" | "length" | "toString" | "toLocaleString" | "pop" | "concat" | "join" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | "every" | "some" | "forEach" | "reduce" | "reduceRight" | "find" | "findIndex" | "fill" | "copyWithin" | "entries" | "keys" | "values">]["columns"]; } : {} : {} : RightT extends string | number | boolean | Date | null | undefined ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never)[tableAlias] : never : never; }, boolean>;
