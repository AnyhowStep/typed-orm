import { AnyRawExpr, RawExprUtil } from "../raw-expr";
import { Expr } from "../expr";
import * as invalid from "../invalid";
import { ColumnReferencesUtil } from "../column-references";
import { SelectBuilder } from "../select-builder";
import { Column } from "../column";
import { Join } from "../join";
import { AliasedTable } from "../aliased-table";
export declare function isNull<RawT extends AnyRawExpr>(expr: RawT): Expr<RawExprUtil.UsedReferences<RawT>, boolean>;
export declare function isNotNull<RawT extends AnyRawExpr>(expr: RawT): Expr<RawExprUtil.UsedReferences<RawT>, boolean>;
export declare function typeCheckBinaryOp(operator: string): <LeftT extends string | number | boolean | Date | Column<any, any, any> | Expr<any, any> | import("../raw-expr/raw-expr").AnySelectValueBuilder | null | undefined, RightT extends string | number | boolean | Date | Column<any, any, any> | Expr<any, any> | import("../raw-expr/raw-expr").AnySelectValueBuilder | null | undefined>(left: LeftT, right: RightT) => null extends (LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? LeftT extends undefined ? null : LeftT : LeftT extends Column<string, string, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends Expr<any, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends SelectBuilder<any> ? LeftT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<LeftT["data"]["selects"][0]["assertDelegate"]> | null : never : never) ? invalid.E3<"Left expression is nullable,", LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? LeftT extends undefined ? null : LeftT : LeftT extends Column<string, string, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends Expr<any, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends SelectBuilder<any> ? LeftT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<LeftT["data"]["selects"][0]["assertDelegate"]> | null : never : never, "comparison with NULL yields NULL; consider narrowing"> : null extends (RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? RightT extends undefined ? null : RightT : RightT extends Column<string, string, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends Expr<any, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends SelectBuilder<any> ? RightT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<RightT["data"]["selects"][0]["assertDelegate"]> | null : never : never) ? invalid.E3<"Right expression is nullable,", RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? RightT extends undefined ? null : RightT : RightT extends Column<string, string, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends Expr<any, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends SelectBuilder<any> ? RightT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<RightT["data"]["selects"][0]["assertDelegate"]> | null : never : never, "comparison with NULL yields NULL; consider narrowing"> : Expr<(LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["table"]["alias"]]: true extends { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"], string>]: Column<{ [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["tableAlias"], { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["name"], ReturnType<{ [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"]; } : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["table"]["alias"]]: true extends { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"], string>]: Column<{ [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["tableAlias"], { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["name"], ReturnType<{ [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"]; } : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), boolean>;
export declare const eq: <LeftT extends string | number | boolean | Date | Column<any, any, any> | Expr<any, any> | import("../raw-expr/raw-expr").AnySelectValueBuilder | null | undefined, RightT extends string | number | boolean | Date | Column<any, any, any> | Expr<any, any> | import("../raw-expr/raw-expr").AnySelectValueBuilder | null | undefined>(left: LeftT, right: RightT) => null extends (LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? LeftT extends undefined ? null : LeftT : LeftT extends Column<string, string, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends Expr<any, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends SelectBuilder<any> ? LeftT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<LeftT["data"]["selects"][0]["assertDelegate"]> | null : never : never) ? invalid.E3<"Left expression is nullable,", LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? LeftT extends undefined ? null : LeftT : LeftT extends Column<string, string, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends Expr<any, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends SelectBuilder<any> ? LeftT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<LeftT["data"]["selects"][0]["assertDelegate"]> | null : never : never, "comparison with NULL yields NULL; consider narrowing"> : null extends (RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? RightT extends undefined ? null : RightT : RightT extends Column<string, string, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends Expr<any, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends SelectBuilder<any> ? RightT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<RightT["data"]["selects"][0]["assertDelegate"]> | null : never : never) ? invalid.E3<"Right expression is nullable,", RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? RightT extends undefined ? null : RightT : RightT extends Column<string, string, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends Expr<any, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends SelectBuilder<any> ? RightT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<RightT["data"]["selects"][0]["assertDelegate"]> | null : never : never, "comparison with NULL yields NULL; consider narrowing"> : Expr<(LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["table"]["alias"]]: true extends { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"], string>]: Column<{ [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["tableAlias"], { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["name"], ReturnType<{ [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"]; } : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["table"]["alias"]]: true extends { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"], string>]: Column<{ [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["tableAlias"], { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["name"], ReturnType<{ [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"]; } : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), boolean>;
export declare const notEq: <LeftT extends string | number | boolean | Date | Column<any, any, any> | Expr<any, any> | import("../raw-expr/raw-expr").AnySelectValueBuilder | null | undefined, RightT extends string | number | boolean | Date | Column<any, any, any> | Expr<any, any> | import("../raw-expr/raw-expr").AnySelectValueBuilder | null | undefined>(left: LeftT, right: RightT) => null extends (LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? LeftT extends undefined ? null : LeftT : LeftT extends Column<string, string, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends Expr<any, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends SelectBuilder<any> ? LeftT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<LeftT["data"]["selects"][0]["assertDelegate"]> | null : never : never) ? invalid.E3<"Left expression is nullable,", LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? LeftT extends undefined ? null : LeftT : LeftT extends Column<string, string, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends Expr<any, any> ? ReturnType<LeftT["assertDelegate"]> : LeftT extends SelectBuilder<any> ? LeftT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<LeftT["data"]["selects"][0]["assertDelegate"]> | null : never : never, "comparison with NULL yields NULL; consider narrowing"> : null extends (RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? RightT extends undefined ? null : RightT : RightT extends Column<string, string, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends Expr<any, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends SelectBuilder<any> ? RightT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<RightT["data"]["selects"][0]["assertDelegate"]> | null : never : never) ? invalid.E3<"Right expression is nullable,", RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? RightT extends undefined ? null : RightT : RightT extends Column<string, string, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends Expr<any, any> ? ReturnType<RightT["assertDelegate"]> : RightT extends SelectBuilder<any> ? RightT["data"]["selects"] extends any[] & {
    "0": any;
} & {
    length: 1;
} ? ReturnType<RightT["data"]["selects"][0]["assertDelegate"]> | null : never : never, "comparison with NULL yields NULL; consider narrowing"> : Expr<(LeftT extends RawExprUtil.WithParentJoins ? true extends LeftT["data"]["hasParentJoins"] ? LeftT["data"]["parentJoins"][Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? { readonly [tableAlias in LeftT["data"]["parentJoins"][Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["table"]["alias"]]: true extends { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"], string>]: Column<{ [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["tableAlias"], { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["name"], ReturnType<{ [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: LeftT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? LeftT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? LeftT["data"]["parentJoins"][index] : never : never; }[Extract<keyof LeftT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"]; } : {} : {} : LeftT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : LeftT extends Column<string, string, any> ? { readonly [tableAlias in LeftT["tableAlias"]]: { readonly [name in LeftT["name"]]: LeftT; }; } : LeftT extends Expr<any, any> ? LeftT["usedReferences"] : never) & (RightT extends RawExprUtil.WithParentJoins ? true extends RightT["data"]["hasParentJoins"] ? RightT["data"]["parentJoins"][Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? { readonly [tableAlias in RightT["data"]["parentJoins"][Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["table"]["alias"]]: true extends { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["nullable"] ? { readonly [columnName in Extract<keyof { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"], string>]: Column<{ [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["tableAlias"], { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["name"], ReturnType<{ [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"][columnName]["assertDelegate"]> | null>; } : { [index in Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]: RightT["data"]["parentJoins"][index] extends Join<AliasedTable<string, string, import("../column-collection/column-collection").ColumnCollection>, import("../column-collection/column-collection").ColumnCollection, boolean> ? RightT["data"]["parentJoins"][index]["table"]["alias"] extends tableAlias ? RightT["data"]["parentJoins"][index] : never : never; }[Extract<keyof RightT["data"]["parentJoins"], "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30">]["columns"]; } : {} : {} : RightT extends import("../raw-expr/raw-expr").AllowedExprConstant ? {} : RightT extends Column<string, string, any> ? { readonly [tableAlias in RightT["tableAlias"]]: { readonly [name in RightT["name"]]: RightT; }; } : RightT extends Expr<any, any> ? RightT["usedReferences"] : never), boolean>;
export declare function isNotNullAndEq<LeftT extends AnyRawExpr, RightT extends AnyRawExpr>(left: LeftT, right: RightT): (Expr<ColumnReferencesUtil.Merge<RawExprUtil.UsedReferences<LeftT>, RawExprUtil.UsedReferences<RightT>>, boolean>);
export declare function isIn<LeftT extends AnyRawExpr, RightT extends AnyRawExpr>(left: LeftT, ...rightArr: RightT[]): (null extends RawExprUtil.Type<LeftT> ? invalid.E3<"Left expression is nullable,", RawExprUtil.Type<LeftT>, "comparison with NULL yields NULL; consider narrowing"> : null extends RawExprUtil.Type<RightT> ? invalid.E3<"Left expression is nullable,", RawExprUtil.Type<LeftT>, "comparison with NULL yields NULL; consider narrowing"> : Expr<ColumnReferencesUtil.Merge<RawExprUtil.UsedReferences<LeftT>, RawExprUtil.UsedReferences<RightT>>, boolean>);
