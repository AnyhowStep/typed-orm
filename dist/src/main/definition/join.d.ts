import * as d from "../declaration";
import * as sd from "schema-decorator";
import { Column } from "./column";
export declare function getJoinFrom<ColumnReferencesT extends d.ColumnReferences, JoinFromTupleCallbackT extends d.JoinFromTupleCallback<ColumnReferencesT>>(columnReferences: ColumnReferencesT, callback: JoinFromTupleCallbackT): d.JoinFromTupleOfCallback<JoinFromTupleCallbackT>;
export declare function getJoinTo<ToTableT extends d.AnyAliasedTable, JoinToTupleCallbackT extends d.JoinToTupleCallback<ToTableT, d.Tuple<d.AnyColumn>>>(table: ToTableT, callback: JoinToTupleCallbackT): any;
export declare function getJoinToUsingFrom<ToTableT extends d.AnyAliasedTable, TupleT extends d.Tuple<d.AnyColumn>>(table: ToTableT, fromTuple: TupleT): d.RenameTableOfColumns<TupleT, ToTableT["alias"]>;
export declare function toNullableJoinTuple<TupleT extends d.Tuple<d.AnyJoin>>(tuple: TupleT): d.ToNullableJoinTuple<TupleT>;
export declare function replaceColumnOfJoin<JoinT extends d.AnyJoin, TableNameT extends string, NameT extends string, NewTypeT>(join: JoinT, newColumn: Column<TableNameT, NameT, NewTypeT>): d.ReplaceColumnOfJoin<JoinT, TableNameT, NameT, NewTypeT>;
export declare function replaceColumnOfJoinTuple<JoinTupleT extends d.Tuple<d.AnyJoin>, TableNameT extends string, NameT extends string, NewTypeT>(joinTuple: JoinTupleT, newColumn: Column<TableNameT, NameT, NewTypeT>): d.ReplaceColumnOfJoinTuple<JoinTupleT, TableNameT, NameT, NewTypeT>;
export declare function nullableJoinTableNames<JoinTupleT extends d.Tuple<d.AnyJoin>>(joins: JoinTupleT): d.NullableJoinTableNames<JoinTupleT>[];
export declare function assertDelegateOfJoinTuple<JoinTupleT extends d.Tuple<d.AnyJoin>, TableNameT extends string, NameT extends string>(joins: JoinTupleT, table: TableNameT, name: NameT): sd.AssertDelegate<d.ColumnType<d.ColumnOfJoinTuple<JoinTupleT, TableNameT, NameT>>>;
