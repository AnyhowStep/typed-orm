import { Query } from "../../query";
import { AfterFromClause } from "../predicate";
import { ColumnRefUtil } from "../../../column-ref";
import { RawExpr, RawExprUtil } from "../../../raw-expr";
import { ColumnUtil, IColumn } from "../../../column";
import { IAnonymousTypedExpr } from "../../../expr";
export declare type HavingDelegate<QueryT extends AfterFromClause> = ((columns: ColumnRefUtil.ToConvenient<ColumnRefUtil.FromQuery<QueryT>>, query: QueryT) => RawExpr<boolean>);
export declare type Having<QueryT extends AfterFromClause> = (Query<{
    readonly _distinct: QueryT["_distinct"];
    readonly _sqlCalcFoundRows: QueryT["_sqlCalcFoundRows"];
    readonly _joins: QueryT["_joins"];
    readonly _parentJoins: QueryT["_parentJoins"];
    readonly _selects: QueryT["_selects"];
    readonly _where: QueryT["_where"];
    readonly _grouped: QueryT["_grouped"];
    readonly _having: IAnonymousTypedExpr<boolean>;
    readonly _orders: QueryT["_orders"];
    readonly _limit: QueryT["_limit"];
    readonly _unions: QueryT["_unions"];
    readonly _unionOrders: QueryT["_unionOrders"];
    readonly _unionLimit: QueryT["_unionLimit"];
    readonly _mapDelegate: QueryT["_mapDelegate"];
}>);
export declare type AssertValidHavingDelegate_Hack<QueryT extends AfterFromClause, HavingDelegateT extends HavingDelegate<QueryT>, ResultT> = (ColumnUtil.AssertValidUsed<RawExprUtil.UsedColumns<ReturnType<HavingDelegateT>>[number], Extract<ColumnUtil.FromQuery<QueryT>, IColumn>> extends never ? ResultT : ColumnUtil.AssertValidUsed<RawExprUtil.UsedColumns<ReturnType<HavingDelegateT>>[number], Extract<ColumnUtil.FromQuery<QueryT>, IColumn>> | void);
export declare type HavingResult<QueryT extends AfterFromClause, HavingDelegateT extends HavingDelegate<QueryT>> = (AssertValidHavingDelegate_Hack<QueryT, HavingDelegateT, Having<QueryT>>);
export declare function having<QueryT extends AfterFromClause, HavingDelegateT extends HavingDelegate<QueryT>>(query: QueryT, delegate: HavingDelegateT): (HavingResult<QueryT, HavingDelegateT>);
