import * as sd from "schema-decorator";
import { PrimitiveExpr } from "./primitive-expr";
import { IAnonymousTypedExpr, IExpr } from "./expr";
import { IAnonymousTypedColumn, IColumn } from "./column";
import { TableSubquery } from "./table-subquery";
import { ColumnRefUtil } from "./column-ref";
import { QueryTree } from "./query-tree";
import { Tuple } from "./tuple";
import { ColumnRef } from "./column-ref";
import { OneSelectItemQuery, ZeroOrOneRowQuery, OneRowQuery } from "./query/util";
import { IQuery } from "./query";
import { IJoin } from "./join";
import { SelectItemUtil } from "./select-item";
export declare type RawExpr<TypeT> = ((TypeT extends PrimitiveExpr ? TypeT : never) | IAnonymousTypedExpr<TypeT> | IAnonymousTypedColumn<TypeT> | (null extends TypeT ? (OneSelectItemQuery<TypeT> & ZeroOrOneRowQuery) : (OneSelectItemQuery<TypeT> & OneRowQuery)) | (null extends TypeT ? TableSubquery.SingleValueOrEmpty<TypeT> : TableSubquery.SingleValue<TypeT>));
export declare namespace RawExprUtil {
    type UsedRef<RawExprT extends RawExpr<any>> = (RawExprT extends PrimitiveExpr ? {} : RawExprT extends IExpr ? RawExprT["usedRef"] : RawExprT extends IColumn ? ColumnRefUtil.FromColumn<RawExprT> : RawExprT extends IQuery ? (RawExprT["_parentJoins"] extends IJoin[] ? ColumnRefUtil.FromJoinArray<RawExprT["_parentJoins"]> : {}) : RawExprT extends TableSubquery.SingleValueOrEmpty<any> ? {} : never);
    function usedRef<RawExprT extends RawExpr<any>>(rawExpr: RawExprT): UsedRef<RawExprT>;
    type TypeOf<RawExprT extends RawExpr<any>> = (RawExprT extends PrimitiveExpr ? RawExprT : RawExprT extends IExpr ? ReturnType<RawExprT["assertDelegate"]> : RawExprT extends IColumn ? ReturnType<RawExprT["assertDelegate"]> : RawExprT extends OneSelectItemQuery<any> ? (RawExprT extends OneRowQuery ? SelectItemUtil.TypeOf<RawExprT["_selects"][0]> : null | SelectItemUtil.TypeOf<RawExprT["_selects"][0]>) : RawExprT extends TableSubquery.SingleValueOrEmpty<any> ? TableSubquery.TypeOf<RawExprT> : never);
    type AssertDelegate<RawExprT extends RawExpr<any>> = (RawExprT extends PrimitiveExpr ? sd.AssertDelegate<RawExprT> : RawExprT extends IExpr ? RawExprT["assertDelegate"] : RawExprT extends IColumn ? RawExprT["assertDelegate"] : RawExprT extends OneSelectItemQuery<any> ? (RawExprT extends OneRowQuery ? sd.AssertDelegate<SelectItemUtil.TypeOf<RawExprT["_selects"][0]>> : sd.AssertDelegate<null | SelectItemUtil.TypeOf<RawExprT["_selects"][0]>>) : RawExprT extends TableSubquery.SingleValueOrEmpty<any> ? TableSubquery.AssertDelegate<RawExprT> : never);
    function assertDelegate<RawExprT extends RawExpr<any>>(rawExpr: RawExprT): AssertDelegate<RawExprT>;
    function queryTree(rawExpr: RawExpr<any>): QueryTree;
    type IntersectUsedRefTuple<ArrT extends Tuple<RawExpr<any>>> = (ArrT["length"] extends 0 ? {} : ArrT["length"] extends 1 ? UsedRef<ArrT[0]> : ArrT["length"] extends 2 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> : ArrT["length"] extends 3 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> : ArrT["length"] extends 4 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> : ArrT["length"] extends 5 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> : ArrT["length"] extends 6 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> : ArrT["length"] extends 7 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> : ArrT["length"] extends 8 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> : ArrT["length"] extends 9 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> : ArrT["length"] extends 10 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> : ArrT["length"] extends 11 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> : ArrT["length"] extends 12 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> : ArrT["length"] extends 13 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> : ArrT["length"] extends 14 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> : ArrT["length"] extends 15 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> & UsedRef<ArrT[14]> : ArrT["length"] extends 16 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> & UsedRef<ArrT[14]> & UsedRef<ArrT[15]> : ArrT["length"] extends 17 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> & UsedRef<ArrT[14]> & UsedRef<ArrT[15]> & UsedRef<ArrT[16]> : ArrT["length"] extends 18 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> & UsedRef<ArrT[14]> & UsedRef<ArrT[15]> & UsedRef<ArrT[16]> & UsedRef<ArrT[17]> : ArrT["length"] extends 19 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> & UsedRef<ArrT[14]> & UsedRef<ArrT[15]> & UsedRef<ArrT[16]> & UsedRef<ArrT[17]> & UsedRef<ArrT[18]> : ArrT["length"] extends 20 ? UsedRef<ArrT[0]> & UsedRef<ArrT[1]> & UsedRef<ArrT[2]> & UsedRef<ArrT[3]> & UsedRef<ArrT[4]> & UsedRef<ArrT[5]> & UsedRef<ArrT[6]> & UsedRef<ArrT[7]> & UsedRef<ArrT[8]> & UsedRef<ArrT[9]> & UsedRef<ArrT[10]> & UsedRef<ArrT[11]> & UsedRef<ArrT[12]> & UsedRef<ArrT[13]> & UsedRef<ArrT[14]> & UsedRef<ArrT[15]> & UsedRef<ArrT[16]> & UsedRef<ArrT[17]> & UsedRef<ArrT[18]> & UsedRef<ArrT[19]> : ColumnRef);
    function intersectUsedRefTuple<ArrT extends Tuple<RawExpr<any>>>(...arr: ArrT): IntersectUsedRefTuple<ArrT>;
}
//# sourceMappingURL=raw-expr.d.ts.map