import {IJoin, JoinUtil} from "../join";
import {TypeRef} from "../type-ref";
import {IColumn, ColumnUtil} from "../column";
import {ColumnRef, ColumnRefUtil} from "../column-ref";
import {ColumnMap, ColumnMapUtil} from "../column-map";
import {SelectItem} from "../select-item";
import {IExprSelectItem} from "../expr-select-item";

/*
    Our RefT maybe entirely nullable because of left/right joins.

    With left/right joins, when the table's column values are present,
    not all of them are nullable.
    JoinsT has the real data type of the RefT
*/
export type FetchRefImpl<
    RefT extends TypeRef,
    JoinsT extends IJoin[]
> = (
    //Required
    {
        readonly [tableAlias in Extract<
            JoinUtil.Array.NonNullableTableAliases<JoinsT>,
            keyof RefT
        >] : (
            {
                readonly [columnName in Extract<
                    keyof RefT[tableAlias],
                    keyof JoinUtil.Array.FindWithTableAlias<JoinsT, tableAlias>["columns"]
                >] : (
                    //Get the real data type
                    ReturnType<
                        JoinUtil.Array.FindWithTableAlias<
                            JoinsT,
                            tableAlias
                        >["columns"][columnName]["assertDelegate"]
                    >
                )
            } &
            {
                readonly [columnName in Exclude<
                    keyof RefT[tableAlias],
                    keyof JoinUtil.Array.FindWithTableAlias<JoinsT, tableAlias>["columns"]
                >] : (
                    //Get the real data type
                    RefT[tableAlias][columnName]
                )
            }
        )
    } &
    //Optional
    {
        readonly [tableAlias in Extract<
            JoinUtil.Array.NullableTableAliases<JoinsT>,
            keyof RefT
        >]? : (
            {
                readonly [columnName in Extract<
                    keyof RefT[tableAlias],
                    keyof JoinUtil.Array.FindWithTableAlias<JoinsT, tableAlias>["columns"]
                >] : (
                    //Get the real data type
                    ReturnType<
                        JoinUtil.Array.FindWithTableAlias<
                            JoinsT,
                            tableAlias
                        >["columns"][columnName]["assertDelegate"]
                    >
                )
            } &
            {
                readonly [columnName in Exclude<
                    keyof RefT[tableAlias],
                    keyof JoinUtil.Array.FindWithTableAlias<JoinsT, tableAlias>["columns"]
                >] : (
                    //Get the real data type
                    RefT[tableAlias][columnName]
                )
            }
        )
    } &
    //Extras (Like __aliased)
    {
        readonly [tableAlias in Exclude<
            keyof RefT,
            JoinUtil.Array.TableAliases<JoinsT>
        >] : (
            RefT[tableAlias]
        )
    }
);


export type FromSelectItemArray_ColumnElement<
    ColumnT extends IColumn,
    JoinsT extends IJoin[]
> = (
    {
        readonly [tableAlias in ColumnT["tableAlias"]] : {
            readonly [columnName in ColumnT["name"]] : (
                Extract<ColumnT, {
                    tableAlias : tableAlias,
                    name : columnName,
                }>
            )
        }
    }
);
export type FromSelectItemArray_ExprSelectItemElement<
    ExprSelectItemT extends IExprSelectItem,
    JoinsT extends IJoin[]
> = (
    {
        readonly [tableAlias in ExprSelectItemT["tableAlias"]] : {
            readonly [columnName in ExprSelectItemT["alias"]] : (
                ColumnUtil.FromExprSelectItem<Extract<
                    ExprSelectItemT,
                    {
                        tableAlias : tableAlias,
                        alias : columnName,
                    }
                >>
            )
        }
    }
);
export type FromSelectItemArray_ColumnMapElement<
    ColumnMapT extends ColumnMap,
    JoinsT extends IJoin[]
> = (
    {
        readonly [tableAlias in ColumnMapUtil.TableAlias<ColumnMapT>] : {
            readonly [columnName in ColumnMapUtil.FindWithTableAlias<
                ColumnMapT,
                tableAlias
            >["name"]] : (
                Extract<
                    ColumnMapT,
                    {
                        [k in columnName] : (
                            IColumn &
                            {
                                tableAlias : tableAlias,
                                name : columnName
                            }
                        )
                    }
                >[columnName]
            )
        }
    }
);
export type FromSelectItemArray_ColumnRefElement<
    ColumnRefT extends ColumnRef,
    JoinsT extends IJoin[]
> = (
    {
        readonly [tableAlias in ColumnRefUtil.TableAlias<ColumnRefT>] : {
            readonly [columnName in ColumnRefUtil.FindWithTableAlias<
                ColumnRefT,
                tableAlias
            >["name"]] : (
                Extract<
                    ColumnRefT,
                    { [ta in tableAlias] : { [cn in columnName] : IColumn } }
                >[tableAlias][columnName]
            )
        }
    }
);
export type FromSelectItemArray<
    ArrT extends SelectItem[],
    JoinsT extends IJoin[]
> = (
    ArrT[number] extends never ?
    {} :
    (
        FromSelectItemArray_ColumnElement<
            Extract<ArrT[number], IColumn>,
            JoinsT
        > &
        FromSelectItemArray_ExprSelectItemElement<
            Extract<ArrT[number], IExprSelectItem>,
            JoinsT
        > &
        FromSelectItemArray_ColumnMapElement<
            Extract<ArrT[number], ColumnMap>,
            JoinsT
        > &
        FromSelectItemArray_ColumnRefElement<
            Extract<ArrT[number], ColumnRef>,
            JoinsT
        >
    )
);